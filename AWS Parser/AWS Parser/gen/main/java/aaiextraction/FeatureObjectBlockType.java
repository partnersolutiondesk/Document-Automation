// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aaiextraction/dto/docDetect.proto

package aaiextraction;

/**
 * Protobuf enum {@code aaiextraction.FeatureObjectBlockType}
 */
public enum FeatureObjectBlockType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>NO_OBJECT = 0;</code>
   */
  NO_OBJECT(0),
  /**
   * <code>CODE_BLOCK = 1;</code>
   */
  CODE_BLOCK(1),
  /**
   * <code>COLUMN = 2;</code>
   */
  COLUMN(2),
  /**
   * <code>GRAPHIC = 3;</code>
   */
  GRAPHIC(3),
  /**
   * <code>HANDWRITING = 4;</code>
   */
  HANDWRITING(4),
  /**
   * <code>INFO_BLOCK = 5;</code>
   */
  INFO_BLOCK(5),
  /**
   * <code>KEY_INFO_BLOCK = 6;</code>
   */
  KEY_INFO_BLOCK(6),
  /**
   * <code>KEY_VAL_BLOCK = 7;</code>
   */
  KEY_VAL_BLOCK(7),
  /**
   * <code>STAMP = 8;</code>
   */
  STAMP(8),
  /**
   * <code>TABLE = 9;</code>
   */
  TABLE(9),
  /**
   * <code>TABLE_HEADER_ELEM = 10;</code>
   */
  TABLE_HEADER_ELEM(10),
  /**
   * <code>TABLE_HEADER = 11;</code>
   */
  TABLE_HEADER(11),
  /**
   * <code>TABLE_HEADER_BLOCK = 12;</code>
   */
  TABLE_HEADER_BLOCK(12),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>NO_OBJECT = 0;</code>
   */
  public static final int NO_OBJECT_VALUE = 0;
  /**
   * <code>CODE_BLOCK = 1;</code>
   */
  public static final int CODE_BLOCK_VALUE = 1;
  /**
   * <code>COLUMN = 2;</code>
   */
  public static final int COLUMN_VALUE = 2;
  /**
   * <code>GRAPHIC = 3;</code>
   */
  public static final int GRAPHIC_VALUE = 3;
  /**
   * <code>HANDWRITING = 4;</code>
   */
  public static final int HANDWRITING_VALUE = 4;
  /**
   * <code>INFO_BLOCK = 5;</code>
   */
  public static final int INFO_BLOCK_VALUE = 5;
  /**
   * <code>KEY_INFO_BLOCK = 6;</code>
   */
  public static final int KEY_INFO_BLOCK_VALUE = 6;
  /**
   * <code>KEY_VAL_BLOCK = 7;</code>
   */
  public static final int KEY_VAL_BLOCK_VALUE = 7;
  /**
   * <code>STAMP = 8;</code>
   */
  public static final int STAMP_VALUE = 8;
  /**
   * <code>TABLE = 9;</code>
   */
  public static final int TABLE_VALUE = 9;
  /**
   * <code>TABLE_HEADER_ELEM = 10;</code>
   */
  public static final int TABLE_HEADER_ELEM_VALUE = 10;
  /**
   * <code>TABLE_HEADER = 11;</code>
   */
  public static final int TABLE_HEADER_VALUE = 11;
  /**
   * <code>TABLE_HEADER_BLOCK = 12;</code>
   */
  public static final int TABLE_HEADER_BLOCK_VALUE = 12;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FeatureObjectBlockType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static FeatureObjectBlockType forNumber(int value) {
    switch (value) {
      case 0: return NO_OBJECT;
      case 1: return CODE_BLOCK;
      case 2: return COLUMN;
      case 3: return GRAPHIC;
      case 4: return HANDWRITING;
      case 5: return INFO_BLOCK;
      case 6: return KEY_INFO_BLOCK;
      case 7: return KEY_VAL_BLOCK;
      case 8: return STAMP;
      case 9: return TABLE;
      case 10: return TABLE_HEADER_ELEM;
      case 11: return TABLE_HEADER;
      case 12: return TABLE_HEADER_BLOCK;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FeatureObjectBlockType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      FeatureObjectBlockType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<FeatureObjectBlockType>() {
          public FeatureObjectBlockType findValueByNumber(int number) {
            return FeatureObjectBlockType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return aaiextraction.DocDetect.getDescriptor().getEnumTypes().get(0);
  }

  private static final FeatureObjectBlockType[] VALUES = values();

  public static FeatureObjectBlockType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FeatureObjectBlockType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:aaiextraction.FeatureObjectBlockType)
}

